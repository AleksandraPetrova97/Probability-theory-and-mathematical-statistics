import numpy as np
import pandas as pd
import scipy.stats as stats

s = np.array([27, 37, 42, 48, 57, 56, 77, 80])
p = np.array([1.2, 1.6, 1.8, 1.8, 2.5, 2.6, 3, 3.3])
n = 8
# 1 —Å–ø–æ—Å–æ–±
b1 = (n*np.sum(s*p) - np.sum(s) * np.sum(p)) / (n* np.sum(s**2) - np.sum(s)**2)
# print(b1)

# 2 —Å–ø–æ—Å–æ–±
b1 = (np.mean(s*p) - np.mean(s) * np.mean(p)) / (np.mean(s**2) - np.mean(s)**2)
# print(b1)

b0 = np.mean(p) - b1*np.mean(s)
# print(b0)

y_pred = 0.17147009 + 0.03874585 * s
# print(y_pred)

# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å
mse = ((p - y_pred)**2).sum() / n
# print(mse)

# –ú–∞—Ç—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
x = s.reshape((8,1))
# print(x)
y = p.reshape((8,1))
# print(y)
X = np.hstack([np.ones((8,1)),x])
# print(X)
B = np.dot(np.linalg.inv(np.dot(X.T,X)), X.T @ y)
# print(B)

# –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫

def mse_(B1, y = y, x = x, n = 8):
    return np.sum((B1*x - y)**2)/n

alpha = 1e-6

# mse = 1/n * np.su,((B1*x-y)**2)
# mse = (2/n) * np.sum((B1*X-y)*X)

B1 = 0.1

# n = 8

for i in range (10):
    B1 -= alpha * (2/n) * np.sum((B1 * x - y)*x)
    print('B1 = {}'.format(B1))

for i in range(3000):
    B1 -= alpha * (2/n) * np.sum((B1 * x - y)* x)
    if i % 500 == 0:
        print('Iteranion = {i}, B1 = {B1}, mse = {mse}'.format(i = i, B1 = B1, mse = mse_(B1)))

# –∞ —Ç–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–µ–º mse —á–µ—Ä–µ–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—é –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã

print(mse_(0.041668))

from sklearn.linear_model import LinearRegression

model = LinearRegression() #–∑–∞–¥–∞–µ–º –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏

#  –¥–µ–ª–∞–µ–º –º–∞—Å—Å–∏–≤ S –¥–≤—É–º–µ—Ä–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º reshape(-1,1)

s = s.reshape(-1,1)
print(s)

regres = model.fit(s,p) # –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
print(regres.intercept_) # –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ä—Ç
print(regres.coef_) # –≤—ã–≤–æ–¥–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

# –§—É–Ω–∫—Ü–∏—è predict()

y_pred = model.predict(s) # –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–ª–æ—â–∞–¥—å –≤ –º–æ–¥–µ–ª—å –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
# print(y_pred)

df = pd.DataFrame({'—Ä–µ–∞–ª—å–Ω—ã–µ':p, '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ': y_pred})
# print(df)

#  –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R2

# print(np.corrcoef(s,p)) #[1,0]
# print(np.corrcoef(s,p)**2)

# –∏–ª–∏ –ø–æ–ª—É—á–∏–º –∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
print(regres.score(s,p))

# –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏. –ö—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞
# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏  Œ± =0,05.

print(stats.f.ppf(1-0.05,1,6))

# –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ F—Ä = MSf/ MSo
# Msf (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω—É —Å—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã)
# Msf = SSf / df1

# –æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–∞ 1 —Å—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã
# Mso = SSo / df2

# df1 - —Å—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã —á–∏—Å–ª–∏—Ç–µ–ª—è df1 = p - 1, p - —á–∏—Å–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤(—É –Ω–∞—Å –ø–ª–æ—â–∞–¥—å –∏ —Ü–µ–Ω–∞, —Ç.–µ. 2)
# df2 - —Å—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è df2 = n - p, n - —á–∏—Å–ª–æ –ø–∞—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (—É –Ω–∞—Å n = 8)

# SSf - —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è
# SSo - —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è

df1 = 2 - 1
df2 = 8 - 2

SSf = sum((y_pred - np.mean(p))**2)
print(SSf)

SSo = np.sum((p - y_pred)**2)
print(SSo)

Msf = SSf / df1
print(Msf)

Mso = SSo / df2
print(Mso)

F = Msf / Mso
print(F)

# –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –ö—Ä–∏—Ç–µ—Ä–∏–π –°—Ç—å—é–¥–µ–Ω—Ç–∞
# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏  Œ± =0,05.

print(stats.t.ppf(1-0.025,6))

#  sb –∏ s0 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤

sb = np.sqrt(Mso / np.sum((s - np.mean(s))**2))
print(sb)

s0 = np.sqrt((Mso * np.sum(s**2)) / (n * sum ((s - np.mean(s))**2)))
print(s0)

t0 = b0 / s0 #–∫—Ä–∏—Ç–µ—Ä–∏–π –°—Ç—å—é–¥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ b0
print(t0)
tb = b1 / sb #–∫—Ä–∏—Ç–µ—Ä–∏–π –°—Ç—å—é–¥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ b1
print(tb)

# –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
# –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ ùë¶ —è–≤–ª—è–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (0 –∏–ª–∏ 1). 
# –¢.–µ. —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º—ã –º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.

x1 = 120
x2 = 40
x3 = 1

modl = -0.18839 + 0.01115 * x1 - 0.00279 * x2 + 0.16286 * x3
e = 2.71828
sigmoid = 1 / (1+ e**(-modl))
print(sigmoid)

